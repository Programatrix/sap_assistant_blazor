@using SAPAssistant.Exceptions

@if (Result != null && !string.IsNullOrEmpty(Result.Message))
{
    <div class="toast-container">
        <div class="toast-message @(Result.Success ? "toast-success" : "toast-danger") @(_isClosing ? "toast-hide" : "")">
            @Result.Message
            @if (!Result.Success && !string.IsNullOrEmpty(Result.ErrorCode))
            {
                <div class="error-code">[Código: @Result.ErrorCode]</div>
            }
            <button class="close-btn" @onclick="ClearMessage">×</button>
        </div>
    </div>
}

@code {
    [Parameter] public ResultMessage? Result { get; set; }
    [Parameter] public EventCallback OnClear { get; set; }

    private bool _isClosing = false;

    private async void ClearMessage()
    {
        _isClosing = true;
        StateHasChanged();

        // Espera la animación de salida (0.5s)
        await Task.Delay(500);

        if (OnClear.HasDelegate)
            await OnClear.InvokeAsync(null);

        _isClosing = false;
    }

    // Auto-cierre opcional (descomenta si quieres que desaparezca solo)
   
    protected override void OnParametersSet()
        {
        if (Result != null)
            {
            _ = Task.Delay(5000).ContinueWith(_ =>
                {
                InvokeAsync(() => ClearMessage());
    });
    }
    }
   
}
