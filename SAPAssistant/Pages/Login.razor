@page "/login"
@using SAPAssistant.ViewModels
@using SAPAssistant.Service
@using System.ComponentModel
@attribute [AllowAnonymous]
@layout PublicLayout
@inject LoginViewModel VM
@inject StateContainer State
@implements IDisposable

<div class="flex-center">
    <div class="card">
        <h1 class="text-center mb-6 text-2xl font-semibold">Iniciar Sesión</h1>

        <EditForm Model="VM.LoginModel" OnValidSubmit="VM.HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="flex flex-col gap-4">
                <!-- Usuario -->
                <label class="text-sm text-left" for="username">Usuario *</label>
                <InputText id="username" class="@VM.GetInputClass(VM.UserNameError)"
                           @bind-Value="VM.LoginModel.Username"
                           @oninput="VM.ValidateFields"
                           placeholder="Introduce tu usuario" />

                <!-- Contraseña -->
                <label class="text-sm text-left" for="password">Contraseña *</label>
                <div class="password-wrapper">
                    <InputText id="password" @bind-Value="VM.LoginModel.Password"
                               @oninput="VM.ValidateFields"
                               class="@VM.GetInputClass(VM.PasswordError)"
                               type="@(VM.ShowPassword ? "text" : "password")"
                               placeholder="Introduce tu contraseña" />

                    <button type="button"
                            class="toggle-password-icon"
                            @onclick="VM.TogglePasswordVisibility"
                            aria-label="Mostrar/Ocultar contraseña">
                        @if (VM.ShowPassword)
                        {
                            <svg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='white' width='20' height='20'>
                                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2'
                                      d='M13.875 18.825A10.05 10.05 0 0112 19c-4.477 0-8.268-2.943-9.542-7 a9.964 9.964 0 012.132-3.368m1.941-1.941A9.964 9.964 0 0112 5c4.477 0 8.268 2.943 9.542 7a9.965 9.965 0 01-4.132 4.868M15 12a3 3 0 11-6 0 3 3 0 016 0z' />
                                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M3 3l18 18' />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor' width='20' height='20'>
                                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2'
                                      d='M15 12a3 3 0 11-6 0 3 3 0 016 0z' />
                                <path stroke-linecap='round' stroke-linejoin='round' stroke-width='2'
                                      d='M2.458 12C3.732 7.943 7.523 5 12 5c4.477 0 8.268 2.943 9.542 7-1.274 4.057-5.065 7-9.542 7-4.477 0-8.268-2.943-9.542-7z' />
                            </svg>
                        }
                    </button>
                </div>

                <!-- Botón de Login -->
                <button type="submit"
                        class="button-primary"
                        disabled="@(VM.IsLoading)">
                    Entrar
                </button>
            </div>
        </EditForm>
    </div>
</div>

@if (VM.IsLoading)
{
    <div class="loading-overlay">
        <svg class="spinner-large" viewBox="0 0 50 50">
            <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="5"></circle>
        </svg>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        State.PropertyChanged += HandleStateChanged;
    }

    private void HandleStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(State.AuthenticatedUser))
        {
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose() => State.PropertyChanged -= HandleStateChanged;
}

