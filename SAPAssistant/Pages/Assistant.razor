@page "/"
@using SAPAssistant.Service
@layout AssistantLayout

<div class="chat-wrapper">
    <div class="chat-box">
        <!-- Área de mensajes con scroll -->
        <div class="messages" @ref="MessagesRef" @onscroll="OnScrollChanged">
            @foreach (var msg in ChatHistory)
            {
                <div class="message @(msg.IsUser ? "user" : "bot")">
                    @msg.Content
                </div>
            }
        </div>

        @if (ShowScrollToBottom)
        {
            <button class="scroll-to-bottom" @onclick="ScrollToBottom">⬇️</button>
        }

        <!-- Área de entrada -->
        <div class="input-area">
            <form @onsubmit="HandleSubmit">
                <textarea @bind="UserInput"
                          @oninput="ResizeTextarea"
                          @ref="TextAreaRef"
                          rows="1"
                          class="auto-expand"
                          placeholder="Escribe tu mensaje...">
                </textarea>
                <button type="submit">Enviar</button>
            </form>
        </div>
    </div>
</div>

@code {
    private string UserInput = string.Empty;
    private ElementReference TextAreaRef;
    private ElementReference MessagesRef;

    private List<ChatMessage> ChatHistory = new();
    private bool ShowScrollToBottom = false;

    private string UserId = "demo"; // Aquí puedes vincularlo al login real luego

    [Inject] private IJSRuntime JS { get; set; } = default!;
    [Inject] private AssistantService AssistantService { get; set; } = default!;

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrWhiteSpace(UserInput))
        {
            var pregunta = UserInput.Trim();
            ChatHistory.Add(new ChatMessage { IsUser = true, Content = pregunta });

            UserInput = string.Empty;
            StateHasChanged();

            try
            {
                var resultado = await AssistantService.ConsultarAsync(pregunta);

                ChatHistory.Add(new ChatMessage
                    {
                        IsUser = false,
                        Content = resultado?.Resumen ?? "✅ Consulta ejecutada con éxito."
                    });

                // Opcional: Mostrar el SQL o cantidad de resultados
                // ChatHistory.Add(new ChatMessage { IsUser = false, Content = $"SQL generado:\n{resultado.Sql}" });

            }
            catch (Exception ex)
            {
                ChatHistory.Add(new ChatMessage
                    {
                        IsUser = false,
                        Content = $"❌ Error: {ex.Message}"
                    });
            }

            await ScrollToBottom();
        }
    }

    private async Task ResizeTextarea()
    {
        await JS.InvokeVoidAsync("chatEnhancer.autoResize", TextAreaRef);
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("chatEnhancer.scrollToBottom", MessagesRef);
        ShowScrollToBottom = false;
    }

    private async Task OnScrollChanged()
    {
        var isBottom = await JS.InvokeAsync<bool>("chatEnhancer.isScrolledToBottom", MessagesRef);
        ShowScrollToBottom = !isBottom;
        StateHasChanged();
    }

    public class ChatMessage
    {
        public bool IsUser { get; set; }
        public string Content { get; set; } = "";
    }
}
