@page "/"
@page "/chat/{chatId}"
@layout ChatLayout
@using Microsoft.AspNetCore.Components.Web
@using SAPAssistant.Components.Chat
@using SAPAssistant.Models.Chat
@using SAPAssistant.Service
@using SAPAssistant.Models
@using System.Text.Json
@inject IJSRuntime JS
@inject AssistantService AssistantService
@inject ChatHistoryService ChatHistoryService


<div class="chat-content-full">
    <div class="messages" @ref="messagesContainer">
        @foreach (var msg in Messages)
        {
            <DynamicComponent Type="@GetComponentType(msg)" Parameters="GetParameters(msg)" />
        }
    </div>

    <div class="input-area">
        <SearchBar @bind-SearchText="UserInput" OnSearch="SendMessage" Disabled="isProcessing" />
        @if (isProcessing)
        {
            <div class="loading-spinner">⌛ Procesando...</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? chatId { get; set; }

    private ChatSession? CurrentSession { get; set; }
    private string UserInput { get; set; } = string.Empty;
    private List<MessageBase> Messages { get; set; } = new();
    private ElementReference messagesContainer;
    private bool isProcessing = false;


    protected override async Task OnParametersSetAsync()
    {
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        Messages.Clear(); // Limpiar mensajes anteriores

        if (!string.IsNullOrWhiteSpace(chatId))
        {
            CurrentSession = await ChatHistoryService.GetChatSessionAsync(chatId);
        }
        else
        {
            CurrentSession = new ChatSession
                {
                    Id = Guid.NewGuid().ToString(),
                    Fecha = DateTime.Now,
                    Titulo = "Nuevo chat"
                };
        }

        if (CurrentSession?.MensajesRaw != null)
        {
            foreach (var msgRaw in CurrentSession.MensajesRaw)
            {
                try
                {
                    var json = JsonSerializer.Serialize(msgRaw);
                    var response = JsonSerializer.Deserialize<AssistantResponse>(json, options);
                    var tipo = msgRaw.TryGetValue("tipo", out var typeObj)
                               ? typeObj?.ToString()?.ToLower()
                               : null;

                    if (tipo == null) continue;

                    MessageBase? msg = tipo switch
                    {
                        "text" => JsonSerializer.Deserialize<TextMessage>(json, options),
                        "aclaracion" => JsonSerializer.Deserialize<TextMessage>(json, options),
                        "asistente" => JsonSerializer.Deserialize<TextMessage>(json, options),
                        "result" => JsonSerializer.Deserialize<ResultMessage>(json, options),
                        "error" => JsonSerializer.Deserialize<ErrorMessage>(json, options),
                        "system" => JsonSerializer.Deserialize<SystemMessage>(json, options),
                        "consulta" => JsonSerializer.Deserialize<ResultMessage>(json, options),
                        _ => null
                    };

                    if (msg != null)
                        Messages.Add(msg);
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error al deserializar mensaje: {ex.Message}");
                }
            }
        }
    }



    private async Task SendMessage(string message)
    {
        if (string.IsNullOrWhiteSpace(message) || isProcessing) return;

        isProcessing = true;

        var userMsg = new TextMessage
            {
                Mensaje = message,
                Role = "user"
            };

        Messages.Add(userMsg);

        try
        {
            var resultado = await AssistantService.ConsultarAsync(message, CurrentSession!.Id);

            MessageBase responseMsg = resultado?.Tipo switch
            {
                "aclaracion" or "asistente" => new TextMessage
                    {
                        Role = "assistant",
                        Mensaje = resultado.Mensaje
                    },
                "resumen" => new TextMessage
                    {                        
                        Mensaje = resultado.Resumen
                    },
                "system" => new SystemMessage
                    {
                        Mensaje = resultado.Mensaje
                    },
                _ => new ResultMessage
                    {                        
                        Resumen = resultado?.Resumen ?? "",
                        Sql = resultado?.Sql ?? "",
                        Data = resultado?.Resultados ?? new()
                    }
            };

            Messages.Add(responseMsg);
        }
        catch (Exception ex)
        {
            Messages.Add(new ErrorMessage
                {                    
                    Error = ex.Message
                });
        }

        // 🧠 Actualizar y guardar sesión
        // CurrentSession!.Mensajes = Messages;
        // await ChatHistoryService.SaveChatSessionAsync(CurrentSession, Messages);

        isProcessing = false;
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("chatEnhancer.scrollToBottom", messagesContainer);
    }

    private Type GetComponentType(MessageBase msg)
    {
        return msg.Type switch
        {
            "Text" => typeof(TextMessageComponent),
            "Result" => typeof(ResultMessageComponent),
            "Error" => typeof(ErrorMessageComponent),
            "system" => typeof(SystemMessageComponent),
            _ => typeof(TextMessageComponent)
        };
    }

    private Dictionary<string, object> GetParameters(MessageBase msg)
    {
        return new()
            {
                ["Message"] = msg
            };
    }
}
