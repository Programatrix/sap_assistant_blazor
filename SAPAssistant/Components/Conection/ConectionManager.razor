@namespace SAPAssistant.Components.Connection
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using SAPAssistant.Models
@using SAPAssistant.Service
@inject ConnectionService ConnectionService
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager Navigation

<div class="card card-wide">
    <h3 class="text-xl font-semibold mb-4">Mis conexiones</h3>

    @if (!string.IsNullOrEmpty(ErrorAlCargar))
    {
        <div class="alert-error mb-4">
            @ErrorAlCargar
            <br />
            <button class="button-secondary mt-2" @onclick="RecargarConexiones" disabled="@IsActivating">
                🔄 Reintentar
            </button>
        </div>
    }
    else if (Connections == null || !Connections.Any())
    {
        <p>Cargando conexiones...</p>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Host</th>
                        <th>Puerto</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var conn in Connections)
                    {
                        <tr>
                            <td>@conn.ConnectionId</td>
                            <td>@conn.Host</td>
                            <td>@conn.Port</td>
                            <td>
                                @if (conn.IsActive)
                                {
                                    <span class="text-green-500">✔ Activa</span>
                                }
                                else
                                {
                                    <span class="text-muted">—</span>
                                }
                            </td>
                            <td>
                                <div class="flex gap-2">
                                    <button class="button-secondary" @onclick="() => EditarConexion(conn)" disabled="@IsActivating">
                                        Editar
                                    </button>
                                    @if (!conn.IsActive)
                                    {
                                        <button class="icon-button" title="Usar esta conexión" @onclick="() => SetActive(conn)" disabled="@IsActivating">
                                            @if (IsActivating && ActivatingConnectionId == conn.ConnectionId)
                                            {
                                                <span class="spinner-border"></span>
                                            }
                                            else
                                            {
                                                <span class="material-icons text-green-500">check_circle</span>
                                            }
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-6 text-right">
            <button class="button-primary" @onclick="NuevaConexion" disabled="@IsActivating">
                <span class="material-icons align-middle">add</span>
                <span class="ml-1">Nueva conexión</span>
            </button>
        </div>

        @if (MostrarMensaje)
        {
            <div class="alert-success mt-4">
                ✅ Conexión activada correctamente
            </div>
        }

        @if (MostrarError)
        {
            <div class="alert-error mt-4">
                ❌ No se pudo validar la conexión. Verifica los datos.
            </div>
        }
    }
</div>

@code {
    private List<ConnectionDTO> Connections = new();
    private bool MostrarMensaje = false;
    private bool MostrarError = false;
    private bool IsActivating = false;
    private string? ActivatingConnectionId = null;
    private string? ErrorAlCargar = null;

    [Parameter] public bool EsModal { get; set; } = false;
    [Parameter] public EventCallback<bool> OnConnectionActivated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await ConnectionService.GetConnectionsAsync();

        if (result.Success)
        {
            Connections = result.Data ?? new();
        }
        else
        {
            ErrorAlCargar = $"❌ {result.Message} (Código: {result.ErrorCode})";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var activeResult = await SessionStorage.GetAsync<string>("active_connection_id");
            var activeId = activeResult.Success ? activeResult.Value : null;

            foreach (var conn in Connections)
                conn.IsActive = conn.ConnectionId == activeId;

            StateHasChanged();
        }
    }

    private async Task RecargarConexiones()
    {
        ErrorAlCargar = null;
        StateHasChanged();
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task SetActive(ConnectionDTO connection)
    {
        if (IsActivating)
            return;

        IsActivating = true;
        ActivatingConnectionId = connection.ConnectionId;
        MostrarMensaje = false;
        MostrarError = false;
        StateHasChanged();

        try
        {
            var isValid = await ConnectionService.ValidateConnectionAsync(connection.ConnectionId);

            if (!isValid)
            {
                MostrarError = true;
                StateHasChanged();
                await Task.Delay(3000);
                MostrarError = false;
                return;
            }

            await SessionStorage.SetAsync("active_connection_id", connection.ConnectionId);
            await SessionStorage.SetAsync("active_db_type", connection.db_type);

            foreach (var c in Connections)
                c.IsActive = c.ConnectionId == connection.ConnectionId;

            MostrarMensaje = true;
            await OnConnectionActivated.InvokeAsync(true);
            await Task.Delay(3000);
            MostrarMensaje = false;
        }
        finally
        {
            IsActivating = false;
            ActivatingConnectionId = null;
            StateHasChanged();
        }
    }

    private async Task EditarConexion(ConnectionDTO conn)
    {
        if (IsActivating) return;

        await SessionStorage.SetAsync("connection_to_edit", conn);
        Navigation.NavigateTo("/connection/edit", EsModal);
    }

    private void NuevaConexion()
    {
        if (IsActivating) return;

        Navigation.NavigateTo("/connection/edit", EsModal);
    }
}
