@page "/"
@layout ChatLayout
@using Microsoft.AspNetCore.Components.Web
@using SAPAssistant.Components.Chat
@using SAPAssistant.Models.Chat
@using SAPAssistant.Service
@using SAPAssistant.Models
@inject IJSRuntime JS
@inject AssistantService AssistantService

<div class="chat-content-full">
    <div class="messages" @ref="messagesContainer">
        @foreach (var msg in Messages)
        {
            <DynamicComponent Type="@GetComponentType(msg)" Parameters="GetParameters(msg)" />
        }
    </div>

    <div class="input-area">
        <SearchBar @bind-SearchText="UserInput" OnSearch="SendMessage" />
    </div>
</div>

@code {
    private string UserInput { get; set; } = string.Empty;
    private List<MessageBase> Messages { get; set; } = new();
    private ElementReference messagesContainer;

    private async Task SendMessage(string message)
    {
        if (string.IsNullOrWhiteSpace(message)) return;

        Messages.Add(new TextMessage
            {
                Content = message,
                IsUser = true
            });

        try
        {
            var resultado = await AssistantService.ConsultarAsync(message);

            if (resultado?.Tipo == "aclaracion")
            {
                Messages.Add(new TextMessage
                    {
                        IsUser = false,
                        Content = resultado.Mensaje
                    });
            }
            else if (resultado?.Tipo == "system")
            {
                Messages.Add(new SystemMessage
                    {
                        Mensaje = resultado.Mensaje
                    });
            }
            else
            {
                Messages.Add(new ResultMessage
                    {
                        IsUser = false,
                        Resumen = resultado?.Resumen ?? "",
                        Sql = resultado?.Sql ?? "",
                        Resultados = resultado?.Resultados ?? new()
                    });
            }
        }
        catch (Exception ex)
        {
            Messages.Add(new ErrorMessage
                {
                    IsUser = false,
                    Error = ex.Message
                });
        }

        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("chatEnhancer.scrollToBottom", messagesContainer);
    }

    private Type GetComponentType(MessageBase msg)
    {
        return msg.Type switch
        {
            "Text" => typeof(TextMessageComponent),
            "Result" => typeof(ResultMessageComponent),
            "Error" => typeof(ErrorMessageComponent),
            "system" => typeof(SystemMessageComponent),
            _ => typeof(TextMessageComponent)
        };
    }

    private Dictionary<string, object> GetParameters(MessageBase msg)
    {
        return new Dictionary<string, object>
            {
                ["Message"] = msg
            };
    }
}
