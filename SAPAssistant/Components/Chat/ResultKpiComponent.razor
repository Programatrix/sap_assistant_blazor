@using SAPAssistant.Models.Chat


<div class="resultado-panel">
    <h3>ðŸ§  Resumen generado</h3>
    <p>@((MarkupString)M.Resumen)</p>
    <div class="botones-acciones">
        <select class="view-select" @onchange="ChangeViewType" value="@M.ViewType">
            <option value="grid">Grid</option>
            <option value="cards">Cards</option>
            <option value="kpi">KPI</option>
            <option value="chart">Chart</option>
        </select>
    </div>

    @if (M.Data.Any())
    {
        <div class="kpi-list">
            @foreach (var row in M.Data)
            {
                <div class="kpi-item">
                    @foreach (var kv in row)
                    {
                        <div><strong>@kv.Key:</strong> @kv.Value</div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <p>No se encontraron resultados.</p>
    }
</div>

@code {
    [Parameter] public MessageBase Message { get; set; }
    [Parameter] public EventCallback<string> OnViewTypeChange { get; set; }
    private ChatResultMessage M => (ChatResultMessage)Message;

    private async Task ChangeViewType(ChangeEventArgs e)
    {
        var newType = e.Value?.ToString() ?? "grid";
        M.ViewType = newType;
        await OnViewTypeChange.InvokeAsync(newType);
    }
}
