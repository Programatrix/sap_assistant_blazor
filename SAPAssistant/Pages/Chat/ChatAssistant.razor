
@page "/chat"
@page "/chat/{chatId}"
@layout ChatLayout
@using Microsoft.AspNetCore.Components.Web
@using SAPAssistant.Components.Chat
@using SAPAssistant.Models.Chat
@using SAPAssistant.ViewModels
@using SAPAssistant.Service
@using System.ComponentModel
@inject ChatViewModel VM
@inject StateContainer State
@implements IDisposable

<div class="chat-content-full">
    <div class="messages" @ref="VM.MessagesContainer">
        @foreach (var msg in VM.Messages)
        {
            <DynamicComponent Type="@VM.GetComponentType(msg)" Parameters="VM.GetParameters(this, msg)" />
        }
    </div>

    <div class="input-area">
        <SearchBar @bind-SearchText="VM.UserInput" OnSearch="@(msg => VM.SendMessage(msg, false))" Disabled="VM.IsProcessing" />
        @if (VM.IsProcessing)
        {
            <div class="loading-spinner">âŒ› Procesando...</div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? chatId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        State.PropertyChanged += HandleStateChanged;
        await VM.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync() => await VM.OnParametersSetAsync(chatId);

    private void HandleStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(State.CurrentChat))
        {
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose() => State.PropertyChanged -= HandleStateChanged;
}
