@using Microsoft.AspNetCore.Components
@inject IJSRuntime JS

<div class="search-wrapper">
    <textarea placeholder="Escribe un mensaje..."
              class="search-input search-input-auto"
              @bind="SearchText"
              @oninput="HandleInput"
              @onkeydown="HandleKeyDown"
              @onkeydown:preventDefault="ShouldPreventDefault"
              rows="1"
              disabled="@Disabled"></textarea>

    <button class="search-button"
            @onclick="OnSearchClicked"
            aria-label="Enviar"
            disabled="@Disabled">
        <svg xmlns="http://www.w3.org/2000/svg"
             width="16" height="16" viewBox="0 0 24 24"
             fill="none" stroke="black" stroke-width="2"
             stroke-linecap="round" stroke-linejoin="round">
            <line x1="22" y1="2" x2="11" y2="13"></line>
            <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
    </button>
</div>

@code {
    [Parameter] public string SearchText { get; set; }
    [Parameter] public EventCallback<string> SearchTextChanged { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;

    private string LastKey = "";
    private bool ShiftPressed = false;
    private bool ShouldPreventDefault => LastKey == "Enter" && !ShiftPressed;

    private async Task HandleInput(ChangeEventArgs e)
    {
        SearchText = e.Value?.ToString();
        await SearchTextChanged.InvokeAsync(SearchText);

        if (!Disabled)
        {
            await JS.InvokeVoidAsync("autoResize", ".search-input-auto");
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        LastKey = e.Key;
        ShiftPressed = e.ShiftKey;

        if (ShouldPreventDefault && !Disabled)
        {
            await OnSearchClicked();
        }
    }

    private async Task OnSearchClicked()
    {
        if (!string.IsNullOrWhiteSpace(SearchText) && !Disabled)
        {
            var textToSend = SearchText;
            SearchText = string.Empty;
            await SearchTextChanged.InvokeAsync(SearchText);
            await OnSearch.InvokeAsync(textToSend);
        }
    }
}
