@using SAPAssistant.Models
@using SAPAssistant.Service.Interfaces
@inject IJSRuntime JS
@inject INotificationService NotificationService

<div class="chat-item @(IsMenuOpen ? "active" : "")" @onclick="AbrirChat">
    <div class="chat-title">@Chat.Titulo</div>

    <div class="chat-options" @onclick:stopPropagation>
        <button class="dots-button" @onclick="ToggleMenu">⋯</button>

        @if (IsMenuOpen)
        {
            <div class="chat-context-menu" id="@MenuId">
                <button @onclick="Renombrar">✏ Renombrar</button>
                <button @onclick="Compartir">🔗 Compartir</button>
                <button @onclick="Archivar">🗃 Archivar</button>
                <button @onclick="() => OnDeleteChat.InvokeAsync(Chat.Id)">🗑 Eliminar</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public ChatSession Chat { get; set; } = default!;
    [Parameter] public EventCallback<string> OnOpenChat { get; set; }
    [Parameter] public EventCallback<string> OnDeleteChat { get; set; }

    private bool IsMenuOpen = false;
    private string MenuId => $"menu-{Chat.Id}";

    [JSInvokable]
    public void CloseMenu()
    {
        IsMenuOpen = false;
        StateHasChanged();
    }

    private async Task ToggleMenu()
    {
        IsMenuOpen = !IsMenuOpen;

        if (IsMenuOpen)
        {
            await JS.InvokeVoidAsync("ClickOutsideHelper.register", MenuId, DotNetObjectReference.Create(this));
        }
    }

    private async Task AbrirChat()
    {
        await OnOpenChat.InvokeAsync(Chat.Id);
    }

    private void Renombrar() => NotificationService.NotifySuccess($"Renombrar {Chat.Titulo}");
    private void Compartir() => NotificationService.NotifySuccess($"Compartir {Chat.Titulo}");
    private void Archivar() => NotificationService.NotifySuccess($"Archivar {Chat.Titulo}");
}
