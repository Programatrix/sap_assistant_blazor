@using SAPAssistant.Models.Chat
@inject IJSRuntime JS

<link href="css/components/ChatMessages/resultmessage.css" rel="stylesheet" />

<div class="resultado-panel">
    <h3>🧠 Resumen generado</h3>
    <p>@((MarkupString)M.Resumen)</p>

    <div class="botones-acciones">
        <button class="toggle-sql-btn" @onclick="() => MostrarSql = !MostrarSql">
            @(MostrarSql ? "Ocultar consulta SQL" : "Ver consulta SQL")
        </button>

        @if (M.Data.Any())
        {
            <button class="export-btn" @onclick="ExportarCsv">⬇️ Exportar CSV</button>
            <button class="copy-table-btn" @onclick="CopiarTabla">📋 Copiar tabla</button>
        }
    </div>

    @if (MostrarSql)
    {
        <div class="sql-block">
            <button class="copy-btn" @onclick="CopiarSql" title="Copiar">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M10 1.5A1.5 1.5 0 0 1 11.5 3v10A1.5 1.5 0 0 1 10 14.5H4A1.5 1.5 0 0 1 2.5 13V4.707a1 1 0 0 1 .293-.707l3.207-3.207a1 1 0 0 1 .707-.293H10zm-1 1H7v2.5a.5.5 0 0 1-.5.5H4v7a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-10A.5.5 0 0 0 9 2.5z" />
                </svg>
            </button>

            @if (Copiado)
            {
                <div class="copiado-alert">✅ Copiada</div>
            }

            <pre>@M.Sql</pre>
        </div>
    }

    @if (M.Data.Any())
    {
        <h4>📊 Resultados</h4>
        <table class="table">
            <thead>
                <tr>
                    @foreach (var col in M.Data[0].Keys)
                    {
                        <th>@col</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in M.Data)
                {
                    <tr>
                        @foreach (var val in row.Values)
                        {
                            <td>@val</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No se encontraron resultados.</p>
    }
</div>

@code {
    [Parameter] public MessageBase Message { get; set; }
    private ResultMessage M => (ResultMessage)Message;

    private bool MostrarSql { get; set; } = false;
    private bool Copiado { get; set; } = false;

    private async Task CopiarSql()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", M.Sql);
        Copiado = true;
        StateHasChanged();
        await Task.Delay(2000);
        Copiado = false;
        StateHasChanged();
    }

    private async Task CopiarTabla()
    {
        if (M.Data.Count == 0) return;

        var headers = string.Join("\t", M.Data[0].Keys);
        var rows = M.Data.Select(row =>
            string.Join("\t", row.Values.Select(v => v?.ToString()?.Replace("\t", " ") ?? ""))
        );

        var fullText = string.Join("\n", new[] { headers }.Concat(rows));

        await JS.InvokeVoidAsync("navigator.clipboard.writeText", fullText);

        Copiado = true;
        StateHasChanged();
        await Task.Delay(2000);
        Copiado = false;
        StateHasChanged();
    }

    private async Task ExportarCsv()
    {
        if (M.Data.Count == 0) return;

        var headers = string.Join(",", M.Data[0].Keys.Select(EscapeCsv));
        var rows = M.Data.Select(row =>
            string.Join(",", row.Values.Select(v => EscapeCsv(v?.ToString() ?? "")))
        );

        var csvContent = string.Join("\n", new[] { headers }.Concat(rows));
        var bytes = System.Text.Encoding.UTF8.GetBytes(csvContent);
        var base64 = Convert.ToBase64String(bytes);
        var fileName = $"resultado_{DateTime.Now:yyyyMMdd_HHmmss}.csv";

        await JS.InvokeVoidAsync("downloadFile", fileName, base64);
    }

    private string EscapeCsv(string input)
    {
        if (input.Contains('"') || input.Contains(',') || input.Contains('\n'))
        {
            input = input.Replace("\"", "\"\"");
            return $"\"{input}\"";
        }
        return input;
    }
}
