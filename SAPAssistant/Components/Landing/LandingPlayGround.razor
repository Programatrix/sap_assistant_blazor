@page "/playground"
@using SAPAssistant.ViewModels
@inject ChatViewModel VM

<section id="playground" class="d-flex justify-content-center align-items-center py-5" style="min-height:100vh;">
    <div class="card-chat text-center w-100" style="max-width:600px;">
        <h2 class="fw-bold mb-2">Prueba el Asistente SAP B1</h2>
        <p class="mb-4 text-muted">
            Hazle una consulta a nuestro asistente y descubre cómo puede ayudarte.
        </p>

        <!-- Contenedor del chat -->
        <div class="chat-container border rounded p-3 mb-3"
             style="max-height:400px; overflow-y:auto;"
             @ref="VM.MessagesContainer">
            @foreach (var msg in VM.Messages)
            {
                <DynamicComponent Type="@VM.GetComponentType(msg)" Parameters="VM.GetParameters(this, msg)" />
            }
        </div>

        <!-- Input y botón -->
        <div class="input-group">
            <input @bind="VM.UserInput" @bind:event="oninput"
                   @onkeydown="HandleEnter"
                   type="text" class="form-control"
                   placeholder="Escribe tu consulta aquí..." />
            <button class="btn btn-primary" @onclick="SendCurrentMessage" disabled="@VM.IsProcessing">Enviar</button>
        </div>

        @if (VM.IsProcessing)
        {
            <div class="text-muted mt-2">⌛ Procesando...</div>
        }
    </div>
</section>

@code {
    private async Task SendCurrentMessage()
    {
        var message = VM.UserInput;
        if (string.IsNullOrWhiteSpace(message)) return;

        await VM.SendMessage(message,true);
        VM.UserInput = string.Empty;
        StateHasChanged();
    }

    private async void HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !VM.IsProcessing)
        {
            await SendCurrentMessage();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await VM.OnInitializedAsync();
        await VM.OnParametersSetAsync(null); // Nueva sesión
    }
}

