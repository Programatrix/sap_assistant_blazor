@page "/demochat"
@layout DemoChatLayaout
@using Microsoft.AspNetCore.Components.Web
@using SAPAssistant.Components.Chat
@using SAPAssistant.Models.Chat
@using SAPAssistant.Service
@inject IJSRuntime JS
@inject AssistantService AssistantService

<div class="chat-content-full">
    <div class="demo-banner">
        🧪 Estás usando el modo demostración. Te quedan @remainingAttempts consultas gratuitas.
    </div>

    <div class="messages" @ref="messagesContainer">
        @foreach (var msg in Messages)
        {
            <DynamicComponent Type="@GetComponentType(msg)" Parameters="GetParameters(msg)" />
        }
    </div>

    <div class="input-area">
        <SearchBar @bind-SearchText="UserInput" OnSearch="SendMessage" Disabled="isProcessing || remainingAttempts == 0" />
        @if (isProcessing)
        {
            <div class="loading-spinner">⌛ Procesando...</div>
        }
    </div>

    @if (remainingAttempts == 0)
    {
        <div class="demo-limit-warning">
            Has alcanzado el límite de uso gratuito. <a href="/registro">Crea una cuenta</a> para seguir usando el asistente.
        </div>
    }
</div>

@code {
    private string UserInput { get; set; } = string.Empty;
    private List<MessageBase> Messages { get; set; } = new();
    private ElementReference messagesContainer;
    private bool isProcessing = false;
    private int remainingAttempts = 3;

    protected override async Task OnInitializedAsync()
    {
        var result = await JS.InvokeAsync<string>("sessionStorage.getItem", "demo_remaining_attempts");
        if (int.TryParse(result, out var stored))
        {
            remainingAttempts = stored;
        }
        else
        {
            remainingAttempts = 3;
        }
    }

    private async Task SendMessage(string message)
    {
        if (string.IsNullOrWhiteSpace(message) || isProcessing || remainingAttempts <= 0) return;

        isProcessing = true;
        remainingAttempts--;

        // 🔐 Guardamos el nuevo valor en sessionStorage
        await JS.InvokeVoidAsync("sessionStorage.setItem", "demo_remaining_attempts", remainingAttempts);

        Messages.Add(new TextMessage
            {
                Mensaje = message,
                Role = "user"
            });

        try
        {
            var resultado = await AssistantService.ConsultarDemoAsync(message);

            if (resultado?.Tipo == "aclaracion" || resultado?.Tipo == "asistente")
            {
                Messages.Add(new TextMessage { Mensaje = resultado.Mensaje });
            }
            else if (resultado?.Tipo == "resumen")
            {
                Messages.Add(new TextMessage { Mensaje = resultado.Resumen });
            }
            else if (resultado?.Tipo == "system")
            {
                Messages.Add(new SystemMessage { Mensaje = resultado.Mensaje });
            }
            else
            {
                Messages.Add(new ResultMessage
                    {
                        Resumen = resultado?.Resumen ?? "",
                        Sql = resultado?.Sql ?? "",
                        Data = resultado?.Resultados ?? new(),
                        ViewType = resultado?.ViewType ?? "grid"
                    });
            }
        }
        catch (Exception ex)
        {
            Messages.Add(new ErrorMessage { Error = ex.Message });
        }

        isProcessing = false;
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("chatEnhancer.scrollToBottom", messagesContainer);
    }

    private Type GetComponentType(MessageBase msg)
        => msg.Type == "Result"
            ? (((ResultMessage)msg).ViewType?.ToLower()) switch
            {
                "cards" => typeof(ResultCardListComponent),
                _ => typeof(ResultGridComponent)
            }
            : msg.Type switch
            {
                "Text" => typeof(TextMessageComponent),
                "Error" => typeof(ErrorMessageComponent),
                "system" => typeof(SystemMessageComponent),
                _ => typeof(TextMessageComponent)
            };

    private Dictionary<string, object> GetParameters(MessageBase msg) =>
        new() { ["Message"] = msg };
}
