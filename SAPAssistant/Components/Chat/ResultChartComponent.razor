@using SAPAssistant.Components.Chart
@using SAPAssistant.Models.Chart
@using SAPAssistant.Models.Chat
@inject IJSRuntime JS
@layout TestLayaout

<div class="resultado-panel">
    <h3>ðŸ§  Resumen generado</h3>
    <p>@((MarkupString)M.Resumen)</p>

    <div class="botones-acciones">
        <button class="toggle-sql-btn" @onclick="() => MostrarSql = !MostrarSql">
            @(MostrarSql ? "Ocultar consulta SQL" : "Ver consulta SQL")
        </button>
        <select class="view-select" @onchange="ChangeViewType" value="@M.ViewType">
            <option value="grid">Grid</option>
            <option value="cards">Cards</option>
            <option value="kpi">KPI</option>
            <option value="chart">Chart</option>
        </select>
    </div>

    @if (MostrarSql)
    {
        <div class="sql-block">
            <button class="copy-btn" @onclick="CopiarSql" title="Copiar">ðŸ“‹</button>
            <pre>@M.Sql</pre>
        </div>
    }

    @if (M.ViewType == "chart")
    {
        <div class="chart-config-panel">
            <div class="chart-config-form">
                <label>Tipo de grÃ¡fico:</label>
                <select @onchange="OnChartTypeChanged">
                    <option value="">Selecciona...</option>
                    <option value="bar" selected="@IsSelectedChartType(ChartType.Bar)">Barras</option>
                    <option value="line" selected="@IsSelectedChartType(ChartType.Line)">LÃ­neas</option>
                    <option value="pie" selected="@IsSelectedChartType(ChartType.Pie)">Torta</option>
                </select>

                <label>Eje X:</label>
                <select @bind="SelectedXAxis">
                    <option value="">Selecciona...</option>
                    @foreach (var column in AvailableColumns)
                    {
                        <option value="@column">@column</option>
                    }
                </select>

                <label>Eje Y:</label>
                <select @bind="SelectedYAxis">
                    <option value="">Selecciona...</option>
                    @foreach (var column in AvailableColumns)
                    {
                        <option value="@column">@column</option>
                    }
                </select>
            </div>

            @if (!string.IsNullOrEmpty(SelectedXAxis) && !string.IsNullOrEmpty(SelectedYAxis))
            {
                <InteractiveChartComponent Data="M.Data"
                                           Config="new ChartConfig { ChartType = SelectedChartType, XAxis = SelectedXAxis, YAxis = SelectedYAxis }" />
            }
            else
            {
                <div class="warning-text">Completa los campos para generar el grÃ¡fico.</div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public MessageBase Message { get; set; }
    [Parameter] public EventCallback<string> OnViewTypeChange { get; set; }

    private ResultMessage M => (ResultMessage)Message;
    private bool MostrarSql { get; set; }

    private ChartType SelectedChartType = ChartType.Bar;
    private string? SelectedXAxis;
    private string? SelectedYAxis;

    private List<string> AvailableColumns => M.Data.FirstOrDefault()?.Keys.ToList() ?? new();

    private async Task CopiarSql()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", M.Sql);
    }

    private async Task ChangeViewType(ChangeEventArgs e)
    {
        var newType = e.Value?.ToString() ?? "grid";

        if (newType == "chart")
        {
            SelectedChartType = ChartType.Bar;
            SelectedXAxis = null;
            SelectedYAxis = null;
        }

        M.ViewType = newType;
        await OnViewTypeChange.InvokeAsync(newType);
    }

    private void OnChartTypeChanged(ChangeEventArgs e)
    {
        var value = e.Value?.ToString()?.ToLower() ?? "";
        SelectedChartType = value switch
        {
            "bar" => ChartType.Bar,
            "line" => ChartType.Line,
            "pie" => ChartType.Pie,
            _ => ChartType.Bar
        };
    }

    private string IsSelectedChartType(ChartType type)
        => SelectedChartType == type ? "selected" : null;
}

