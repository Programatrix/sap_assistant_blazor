@using SAPAssistant.Models
@using SAPAssistant.Models.Chart
@inject IJSRuntime JS
@implements IDisposable

<div class="chart-wrapper">
    <canvas id="@CanvasId"></canvas>
</div>

@if (!string.IsNullOrEmpty(FiltroActivo))
{
    <div class="filtro-activo">
        Filtro: @FiltroActivo
        <button @onclick="LimpiarFiltro">✖</button>
    </div>
}

@code {
    [Parameter] public List<Dictionary<string, object>> Data { get; set; }
    [Parameter] public ChartConfig Config { get; set; }

    private string CanvasId { get; } = $"chart-{Guid.NewGuid()}";
    private DotNetObjectReference<InteractiveChartComponent> objRef;
    private string FiltroActivo;
    private List<Dictionary<string, object>> DataFiltrada;

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
        DataFiltrada = Data ?? new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Config != null)
        {
            await DibujarGrafico();
        }
    }

    [JSInvokable]
    public async Task OnChartLabelClicked(string label)
    {
        FiltroActivo = label;

        if (!string.IsNullOrWhiteSpace(Config?.XAxis))
        {
            DataFiltrada = Data
                .Where(d => d.TryGetValue(Config.XAxis, out var val) && val?.ToString() == label)
                .ToList();
        }

        await DibujarGrafico();
    }

    private async void LimpiarFiltro()
    {
        FiltroActivo = null;
        DataFiltrada = Data ?? new();
        await DibujarGrafico();
    }

    private async Task DibujarGrafico()
    {
        if (Config == null || string.IsNullOrWhiteSpace(Config.XAxis) || string.IsNullOrWhiteSpace(Config.YAxis))
            return;

        var labels = new List<string>();
        var values = new List<double>();

        foreach (var row in DataFiltrada)
        {
            if (!row.TryGetValue(Config.XAxis, out var xVal) || !row.TryGetValue(Config.YAxis, out var yVal))
                continue;

            labels.Add(xVal?.ToString() ?? string.Empty);

            if (double.TryParse(yVal?.ToString(), out var v))
                values.Add(v);
            else
                values.Add(0);
        }

        string chartTypeString = GetChartTypeString(Config.ChartType);
        await JS.InvokeVoidAsync("drawChart", CanvasId, labels, values, chartTypeString, objRef);
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
    private string GetChartTypeString(ChartType chartType)
    {
        return chartType switch
        {
            ChartType.Bar => "bar",
            ChartType.Line => "line",
            ChartType.Pie => "pie",
            _ => "bar" // Valor por defecto si llega algo inesperado
        };
    }

}

